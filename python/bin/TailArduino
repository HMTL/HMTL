#!/usr/bin/python -u
#
# This script reads from serial and prints the output
#

from __future__ import print_function

import argparse

import hmtl.portscan as portscan
from hmtl.SerialBuffer import SerialBuffer
from hmtl.StdinBuffer import StdinBuffer
from hmtl.TimedLogger import TimedLogger


def handle_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--device", dest="device",
                        help="Arduino USB device")

    parser.add_argument("-b", "--baud", dest="baud", type=int,
                        help="Serial port baud ([9600], 19200, 57600, 115200)",
                        default=9600)
    
    parser.add_argument("-t", "--timestamp", dest="timestamp",
                        action="store_true",
                        help="Print timestamps", default=False)

    parser.add_argument("-i", "--input", dest="input",
                        action="store_true",
                        help="Resend stdin to the serial device", default=False)

    options = parser.parse_args()

    if options.device is None:
        options.device = portscan.choose_port()

    if options.device is None:
        parser.print_help()
        exit("Must specify device")

    return options


def main():
    options = handle_args()

    serial = SerialBuffer(options.device, options.baud, verbose=False)
    stdin = StdinBuffer(verbose=False)

    serial.start()
    stdin.start()

    logger = TimedLogger()
    while True:
        # Check the stdin buffer for data
        item = stdin.get(0)
        if item:
            data = item.data.strip()
            if options.input:
                # Resend the input over the serial connection
                logger.log("RESEND: %s" % data, color=TimedLogger.RED)
                serial.connection.write(data + "\n")
            else:
                logger.log("READ: %s" % data, color=TimedLogger.CYAN)

        # Check the serial queue for data
        item = serial.get(0.1)
        if not item:
            continue

        data = item.data.strip()
        try:
            # Attempt to print the item as ascii
            text = data.decode()
        except UnicodeDecodeError:
            # Failing that, print the raw data as hex
            text = ":".join("{:02x}".format(ord(c)) for c in data)

        if options.timestamp:
            logger.log(text)
        else:
            print(text)

if __name__ == '__main__':
    main()