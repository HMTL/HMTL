#!/usr/bin/python
#
# Launch a client/server HMTL command system

import sys
import time

from optparse import OptionParser, OptionGroup

import hmtl.HMTLprotocol as HMTLprotocol
from hmtl.client import HMTLClient
import hmtl.config as config

DEFAULT_SERVER_PORT = 6000


def handle_args():
    global options

    parser = OptionParser()

    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
                      help="Verbose output", default=False)
    parser.add_option("-p", "--port", dest="port", type="int",
                      help="Port to bind to", default=DEFAULT_SERVER_PORT)
    parser.add_option("-a", "--address", dest="address",
                      help="Address to bind to", default="localhost")
    parser.add_option("-k", "--killserver", dest="killserver", action="store_true",
                      help="Send a kill command to the server", default=False)

    # General options
    parser.add_option("-A", "--hmtladdress", dest="hmtladdress", type="int",
                      help="Address to which messages are sent [default=BROADCAST]", 
                      default=HMTLprotocol.BROADCAST)
    parser.add_option("-t", "--tcpsocket", dest="tcpsocket", action="store_true",
                      help="Send directly via tcpsocket rather than command server",
                      default=False)

    # Command types
    group = OptionGroup(parser, "Command Types")
    group.add_option("-V", "--value", action="store_const",
                      dest="commandtype", const="value",
                      help="Send value command", default=None)
    group.add_option("-R", "--rgb", action="store_const",
                      dest="commandtype", const="rgb",
                      help="Send rgb command")
    group.add_option("-B", "--blink", action="store_const",
                      dest="commandtype", const="blink",
                      help="Send blink program")
    group.add_option("-T", "--timedchange", action="store_const",
                      dest="commandtype", const="timedchange",
                      help="Send timed change program")
    group.add_option("-L", "--levelvalue", action="store_const",
                      dest="commandtype", const="levelvalue",
                      help="Send program to set value to sensor level")
    group.add_option("-S", "--soundvalue", action="store_const",
                      dest="commandtype", const="soundvalue",
                      help="Send program to set value to sound level")
    group.add_option("-F", "--fade", action="store_const",
                      dest="commandtype", const="fade",
                      help="Send program to fade between two values [period, R1,G1,B1, R2,G2,B2, flags]")
    group.add_option("--circular", action="store_const",
                      dest="commandtype", const="circular",
                      help="Run a pattern of LEDs around in a circle")
    group.add_option("--sparkle", action="store_const",
                      dest="commandtype", const="sparkle",
                      help="Sparkle program")

    group.add_option("-P", "--program", dest="program", type="string",
                      help="Send program of indicated type [%s]" % (','.join(HMTLprotocol.ProgramGeneric.NAME_MAP.keys())))

    group.add_option("-N", "--none", action="store_const",
                      dest="commandtype", const="none",
                      help="Send program reset command")

    group.add_option("--poll", action="store_const",
                      dest="commandtype", const="poll",
                      help="Send module polling command")
    group.add_option("--setaddr", action="store_const",
                      dest="commandtype", const="setaddr",
                      help="Send address setting command")
    group.add_option("--dump", action="store_const",
                     dest="commandtype", const="dumpconfig",
                     help="Send a request to dump out the module configuration")
    parser.add_option_group(group)

    # Command options
    group = OptionGroup(parser, "Command Options")
    group.add_option("-O", "--output", dest="output", type="string",
                      help="Number of the output to be set", default=HMTLprotocol.OUTPUT_ALL_OUTPUTS)
    group.add_option("-C", "--command", dest="commandvalue", action="store",
                      default = None)
    parser.add_option_group(group)

    (options, args) = parser.parse_args()
    print("options:" + str(options) + " args:" + str(args))

    if options.program:
        options.commandtype = "program"

    if ((options.commandvalue == None) and
            not (options.commandtype in [None, "poll", "setaddr", "none", "levelvalue", "soundvalue", "program", "dumpconfig",
                                         "circular"])):
        print("Must specify a command value")
        sys.exit(1)

    if options.output != HMTLprotocol.OUTPUT_ALL_OUTPUTS:
        if options.output == 'all':
            options.output = HMTLprotocol.OUTPUT_ALL_OUTPUTS
        else:
            try:
                options.output = int(options.output)
            except:
                print("Unable to convert %s to output value" % options.output)
                sys.exit(1)

    return (options, args)
 

def main():

    handle_args()

    msg = None
    expect_response = False

    if (options.commandtype == "value"):
        print("Sending value message.  Address=%d Output=%d Value=%d" %
              (options.hmtladdress, options.output, int(options.commandvalue)))
        msg = HMTLprotocol.get_value_msg(options.hmtladdress,
                                         options.output,
                                         int(options.commandvalue))
    elif (options.commandtype == "rgb"):
        (r,g,b) = options.commandvalue.split(",")
        print("Sending RGB message.  Address=%d Output=%d Value=%d,%d,%d" %
              (options.hmtladdress, options.output, int(r), int(g), int(b)))
        msg = HMTLprotocol.get_rgb_msg(options.hmtladdress,
                                       options.output,
                                       int(r), int(g), int(b))

    elif (options.commandtype == "blink"):
        (a,b,c,d, e,f,g,h) = options.commandvalue.split(",")
        print("Sending BLINK message. Address=%d Output=%d on_period=%d on_value=%s off_period=%d off_values=%s" % (options.hmtladdress, options.output, int(a), [int(b),int(c),int(d)],
                                         int(e), [int(f),int(g),int(h)]))
        msg = HMTLprotocol.get_program_blink_msg(options.hmtladdress,
                                         options.output,
                                         int(a), [int(b),int(c),int(d)],
                                         int(e), [int(f),int(g),int(h)])
    elif (options.commandtype == "timedchange"):
        (a, b,c,d, e,f,g,) = options.commandvalue.split(",")
        print("Sending TIMED CHANGE message. Address=%d Output=%d change_period=%d start_value=%s stop_values=%s" % (options.hmtladdress, options.output, int(a), [int(b),int(c),int(d)],
                                                                                                          [int(e),int(f),int(g)]))
        msg = HMTLprotocol.get_program_timed_change_msg(options.hmtladdress,
                                        options.output,
                                        int(a),
                                        [int(b),int(c),int(d)],
                                        [int(e),int(f),int(g)])
    elif (options.commandtype == "levelvalue"):
        print("Sending LEVEL VALUE message. Address=%d Output=%d" % (options.hmtladdress, options.output))
        msg = HMTLprotocol.get_program_level_value_msg(options.hmtladdress,
                                                       options.output)
    elif (options.commandtype == "soundvalue"):
        print("Sending SOUND VALUE message. Address=%d Output=%d" % (options.hmtladdress, options.output))
        msg = HMTLprotocol.get_program_sound_value_msg(options.hmtladdress,
                                                       options.output)

    elif (options.commandtype == "none"):
        print("Sending NONE message.  Output=%d" % (options.output))
        msg = HMTLprotocol.get_program_none_msg(options.hmtladdress,
                                                options.output)
    elif (options.commandtype == "poll"):
        print("Sending poll message.  Address=%d" %
              (options.hmtladdress))
        msg = HMTLprotocol.get_poll_msg(options.hmtladdress)
        expect_response = True
    elif (options.commandtype == "setaddr"):
        (device_id, new_address) = options.commandvalue.split(",")
        print("Sending set address message.  Address=%d Device=%d NewAddress=%d" %
              (options.hmtladdress, int(device_id), int(new_address)))
        msg = HMTLprotocol.get_set_addr_msg(options.hmtladdress, 
                                            int(device_id), int(new_address))
    elif (options.commandtype == "dumpconfig"):
        print("Send configuration dump message.  Address=%d" %
              options.hmtladdress)
        msg = HMTLprotocol.get_dumpconfig_msg(options.hmtladdress)
        expect_response = True
    elif (options.commandtype == "fade"):
        (period,
         start_r,start_g,start_b,
         stop_r,stop_g,stop_b, flags) = options.commandvalue.split(",")
        print("Sending FADE message. Address=%d Output=%d fade_period=%d start_value=%s stop_values=%s flags=0x%x" %
              (options.hmtladdress, options.output,
               int(period),
               [int(start_r),int(start_g),int(start_b)],
               [int(stop_r),int(stop_g),int(stop_b)],
               int(flags)))
        msg = HMTLprotocol.get_program_fade_msg(
                                    options.hmtladdress,
                                    options.output,
                                    int(period),
                                    [int(start_r), int(start_g), int(start_b)],
                                    [int(stop_r), int(stop_g), int(stop_b)],
                                    int(flags))
    elif (options.commandtype == "sparkle"):
        (period,
         bg_r,bg_g,bg_b,
         sparkle_threshold, bg_threshold,
         hue_min, hue_max, sat_min, sat_max, val_min, val_max
         ) = options.commandvalue.split(",")
        print("Sending SPARKLE message. Address=%d Output=%d period=%d "
              "bg_value=%s sparkle_threshold=%d bg_threshold=%d "
              "hue_min=%d hue_max=%d sat_min=%d sat_max=%d val_min=%d val_max=%d" %
              (options.hmtladdress, options.output,
               int(period),
               [int(bg_r), int(bg_g), int(bg_b)],
               int(sparkle_threshold),
               int(bg_threshold),
               int(hue_min), int(hue_max),
               int(sat_min), int(sat_max),
               int(val_min), int(val_max)))
        program = HMTLprotocol.ProgramSparkle(int(period),
                                                [int(bg_r),int(bg_g),int(bg_b)],
                                                int(sparkle_threshold),
                                                int(bg_threshold),
                                                int(hue_min), int(hue_max),
                                                int(sat_min), int(sat_max),
                                                int(val_min), int(val_max))
        msg = program.prepare_msg(options.hmtladdress, options.output)

    elif (options.commandtype == "circular"):
        if options.commandvalue:
            (period, chain_length,
             bg_r,bg_g,bg_b,
             pattern, flags) = options.commandvalue.split(",")
        else:
            (period, chain_length,
             bg_r, bg_g, bg_b,
             pattern, flags) = (0, 0, 0, 0, 0, 0, 0)
        print("Sending CIRCULAR message. Address=%d Output=%d period=%d length=%d bg_value=%s pattern=%d flags=0x%x" %
              (options.hmtladdress, options.output,
               int(period), int(chain_length),
               [int(bg_r),int(bg_g),int(bg_b)],
               int(pattern), int(flags)))
        program = HMTLprotocol.ProgramCircular(int(period), int(chain_length),
                                              [int(bg_r),int(bg_g),int(bg_b)],
                                               int(pattern), int(flags))
        msg = program.prepare_msg(options.hmtladdress, options.output)

    elif (options.commandtype == "program"):
        commandvalues = options.commandvalue.split(",") if options.commandvalue else None

        try:
            program_number = int(options.program)
        except ValueError:
            program_number = HMTLprotocol.ProgramGeneric.NAME_MAP[options.program]

        if not program_number:
            print("Unknown program value %s" % options.program)
        else:
            print("Sending generic program message. Address=%d Output=%d program=%s data=%s" %
                (options.hmtladdress, options.output, options.program, commandvalues))

            msg = HMTLprotocol.get_program_generic(options.hmtladdress,
                                                   options.output,
                                                   program_number,
                                                   commandvalues)
    else:
        print("Must specify a command")
        exit(1)

    if options.tcpsocket:
        # When sending directly to a device rather than using a command server
        # disable authentication and set the default port.
        authenticate = False
        if options.port == DEFAULT_SERVER_PORT:
            options.port = HMTLprotocol.HMTL_PORT
    else:
        authenticate = True
    client = HMTLClient(options.address, options.port,
                        options.hmtladdress, options.verbose, authenticate=authenticate)

    if msg is not None:
        starttime = time.time()
        if options.tcpsocket:
            # Send directly to a TCPSocket
            hdr = HMTLprotocol.TCPSocketHeader(id=1, datalen=len(msg), source=0,
                                               dest=options.hmtladdress,
                                               flags=0)
            client.send(hdr.pack() + msg)
        else:
            [messages, headers] = client.send_and_ack(msg, expect_response)
        endtime = time.time()
        print("Sent and acked in %.6fs" % (endtime - starttime))

        if (options.commandtype == "dumpconfig"):
            hdrs = [x[-1].config for x in headers]
            print("Configuration objects:")
            for hdr in hdrs:
                print("  * %s" % hdr.short())
            print("outputs: %s" % (config.config_types(hdrs)))

    if options.killserver:
        # Send an exit message to the server
        print("Sending EXIT message to server")
        client.send_exit()

    client.close()

    print("Done.")
    exit(0)

main()
